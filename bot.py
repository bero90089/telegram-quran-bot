import os
import re
import random
import asyncio
import subprocess  # –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

# ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
try:
    import httpx
    import aiogram
    import bs4
    from aiogram import Bot, Dispatcher, types
    from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.utils import executor
    from aiogram.utils.callback_data import CallbackData
    from bs4 import BeautifulSoup
    from dotenv import load_dotenv
except ImportError:
    print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    subprocess.run(["pip", "install", "aiogram", "httpx", "beautifulsoup4", "python-dotenv"])
    import httpx
    import aiogram
    import bs4
    from aiogram import Bot, Dispatcher, types
    from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.utils import executor
    from aiogram.utils.callback_data import CallbackData
    from bs4 import BeautifulSoup
    from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN, parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher(bot)

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—è—Ç–æ–≤
cache = {}

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
subscribers = set()

# –ö–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
tafsir_callback = CallbackData("tafsir", "surah", "ayah", "index")
translation_callback = CallbackData("translation", "surah", "ayah", "translator")

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (–ø—Ä–∏–º–µ—Ä)
TRANSLATIONS = {
    "kuliev": "–ö—É–ª–∏–µ–≤",
    "osmanov": "–û—Å–º–∞–Ω–æ–≤",
    "porohova": "–ü–æ—Ä–æ—Ö–æ–≤–∞"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—è—Ç–∞ –∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π
async def fetch_ayat(surah, ayah, translator="kuliev"):
    url = f"https://quran-online.ru/{surah}:{ayah}?translator={translator}"

    if (surah, ayah, translator) in cache:
        return cache[(surah, ayah, translator)]
    
    async with httpx.AsyncClient() as client:
        response = await client.get(url)
        if response.status_code != 200:
            return None
    
    soup = BeautifulSoup(response.text, "html.parser")

    # –ê—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    arabic_text = soup.find("div", class_="ayat-text arabic")
    arabic = arabic_text.text.strip() if arabic_text else "–ê—è—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

    # –ü–µ—Ä–µ–≤–æ–¥
    translation_text = soup.find("div", class_="translation")
    translation = translation_text.text.strip() if translation_text else "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    # –¢–æ–ª–∫–æ–≤–∞–Ω–∏—è
    tafsir_divs = soup.find_all("div", class_="tafsir")
    tafsirs = []

    for index, div in enumerate(tafsir_divs):
        author = div.find("strong")
        author_name = author.text.strip() if author else f"–¢–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å {index + 1}"
        tafsir_text = div.text.replace(author_name, "").strip()
        tafsirs.append((author_name, tafsir_text))

    if not tafsirs:
        tafsirs.append(("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))

    cache[(surah, ayah, translator)] = (arabic, translation, tafsirs)

    return arabic, translation, tafsirs

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∞—è—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `2:67`, –∏ —è –ø—Ä–∏—à–ª—é –µ–≥–æ —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–≤–æ–¥ –∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "`/subscribe` - –ø–æ–ª—É—á–∞—Ç—å –∞—è—Ç –¥–Ω—è\n"
        "`/unsubscribe` - –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
    )

# –ö–æ–º–∞–Ω–¥–∞ /subscribe (–ø–æ–¥–ø–∏—Å–∫–∞)
@dp.message_handler(commands=["subscribe"])
async def subscribe_user(message: types.Message):
    subscribers.add(message.chat.id)
    await message.reply("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∞—è—Ç–æ–≤!")

# –ö–æ–º–∞–Ω–¥–∞ /unsubscribe (–æ—Ç–ø–∏—Å–∫–∞)
@dp.message_handler(commands=["unsubscribe"])
async def unsubscribe_user(message: types.Message):
    subscribers.discard(message.chat.id)
    await message.reply("‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—è—Ç–∞ –¥–Ω—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
async def send_daily_ayat():
    while True:
        await asyncio.sleep(24 * 60 * 60)  # 24 —á–∞—Å–∞

        # –°–ª—É—á–∞–π–Ω—ã–π –∞—è—Ç (–ø—Ä–∏–º–µ—Ä)
        surah = random.randint(1, 114)
        ayah = random.randint(1, 7)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∞—è—Ç–æ–≤ —Ä–∞–∑–Ω–æ–µ

        result = await fetch_ayat(surah, ayah)
        if result:
            arabic, translation, _ = result
            text = f"üìñ *–ê—è—Ç –¥–Ω—è: {surah}:{ayah}*\n\n**–¢–µ–∫—Å—Ç –∞—è—Ç–∞:**\n{arabic}\n\n**–ü–µ—Ä–µ–≤–æ–¥:**\n{translation}"

            for user_id in subscribers:
                try:
                    await bot.send_message(user_id, text)
                except:
                    pass  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(send_daily_ayat())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∞—è—Ç–æ–≤
    executor.start_polling(dp, skip_updates=True)
